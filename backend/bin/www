const app = require('../app');
const debug = require('debug')('backend:server');
const http = require('http');
require('dotenv').config();
const { logServerMessages } = require('../utils/saveLogfile');

const port = normalizePort(process.env.PORT || '8000');
app.set('port', port);
const server = http.createServer(app);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }
  return false;
}

const logServerStartTime = () => {
  const currentTime = new Date().toLocaleTimeString();
  logServerMessages(`Server restarted at ${currentTime}`);
};

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
  switch (error.code) {
    case 'EACCES':
      logServerMessages(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      logServerMessages(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Files serving on port: ' + bind);
  logServerStartTime();
}

// Handle unhandled exceptions and rejections
process.on('uncaughtException', (err) => {
  logServerMessages(`Uncaught Exception: ${err.message}`);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  logServerMessages(`Unhandled Rejection at:`, promise, 'reason:', reason);
});

// Handle SIGTERM for graceful shutdown
process.on('SIGTERM', () => {
  server.close(() => {
    logServerMessages('Server gracefully closed.');
    process.exit(0);
  });
});
